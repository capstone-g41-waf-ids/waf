# Set the default action
SecDefaultAction "phase:1,log,auditlog,deny,status:403"

# All rules check for obfuscation using html or url encoding

##SQL Injection---------------------------------------------------------------------------------------------------------
#
# Block SQLI attempts using "always true" statements (e.g., 1=1, ""="")
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)((0|1)*[+\s]*([\"\']|%22|%27){0,2}[+\s]*\)*[+\s]*(or)[+\s]*\(*[+\s]*(([\"\']|%22|%27){0,2}[+\s]*(0|1)*[+\s]*([\"\']|%22|%27){0,2})[+\s]*(=|%3D)[+\s]*([\"\']|%22|%27){0,2}[+\s]*(0|1)*([\"\']|%22|%27){0,2})" "id:100030,phase:2,log,auditlog,deny,status:403,msg:'SQLI True Statements'"
# Block SQLI using SQL comments (e.g., --, /* */, #)
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)(((\/|%2F)(\*|%2A).*(\*|%2A)(\/|%2F))|((\/|%2F)(\*|%2A))|((\*|%2A)(\/|%2F))|(\-|%96){2})" "id:100031,phase:2,log,auditlog,deny,status:403,msg:'SQLI Comments'"
# Block SQLI attempts using stacked statements using ";"
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)((\;|%3B).*(drop|selec|union|alter|create|delete|execute|exec|merge|update))" "id:100032,phase:2,log,auditlog,deny,status:403,msg:'SQLI Stacked Queries'"
# Block SQLI attempts using login bypass for admin account
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)((?i)((admin)([\"\']|%22|%27)*\)*[+\s]*|([\"\']|%22|%27)*\)*[+\s]*(or)[+\s]*\(*([\"\']|%22|%27){0,2}1*([\"\']|%22|%27){0,2}[+\s]*(=|%3D)[+\s]*([\"\']|%22|%27){0,2}1*)(((\/|%2F)(\*|%2A).*(\*|%2A)(\/|%2F))|((\/|%2F)(\*|%2A))|((\*|%2A)(\/|%2F))|(\-|%96){2}|#))" "id:100033,phase:2,log,auditlog,deny,status:403,msg:'SQLI Login Bypass'"

## PATH TRAVERSAL-------------------------------------------------------------------------------------------------------
# Block path traversal attempts (e.g., /.../, \/../, etc.)
SecRule REQUEST_URI|ARGS|REQUEST_BODY|REQUEST_URI_RAW "@rx (?i)((((\.|%(25)?2e)+(\\|%(25)?5C)*(\\?\/|%((25)?2f|c0|af))+)+)|(\.|%(25)?2e){2,}|\\+)" "id:100002,phase:1,log,auditlog,deny,status:403,msg:'Traversal'"



##LOCAL FILE INCLUSION--------------------------------------------------------------------------------------------------
##
# Block Local File Inclusion attempts using wrappers (e.g., http:), and null characters (%00)
SecRule REQUEST_URI "@rx (?i)((.+((http|php|zip|data|expect)(:|%3A))|(%00)+)" "id:100003,phase:1,log,auditlog,deny,status:403,msg:'LFI'"



#PHP FILE INCLUSIONS----------------------------------------------------------------------------------------------------
#
# Block PHP file inclusions
SecRule REQUEST_URI|ARGS "@rx (?i)(((\/.*\/.*)+\.php)+)" "id:100004,phase:1,log,auditlog,deny,status:403,msg:'PHP Inclusion'"



#REMOTE FILE INCLUSION--------------------------------------------------------------------------------------------------
#
# Block remote file inclusion (e.g., ip in url)
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})" "id:100005,phase:1,log,auditlog,deny,status:403,msg:'RFI'"



# SERVER-SIDE REQUEST FORGERY (SSRF)------------------------------------------------------------------------------------
# WRAPPERS
# Block SSRF attemps using wrappers (e.g., http:, dict:, etc.)
SecRule REQUEST_URI "@rx (?i)((dict|expect|fd|files*|gopher|https*|imap|jar|proto-schema|ldap|mailto|netdoc|ogg|pop3|[st]*[mf]tp|ssh2*|telnet)(:|%3a|&#58;)(/|%2F|&frasl;)*)" "id:100006,phase:1,log,auditlog,deny,status:403,msg:'SSRF wrapper'"

# LOCALHOST BYPASS
# Block SSRF attempts using localhost bypass
SecRule REQUEST_URI_RAW|REQUEST_URI|ARGS "@rx (?i)((.)*(\/\/.+[\/](\#|\@|\?|\\)+)|(\.|\@|\\|:|#|\?|%|\/)*((0x[\dA-F]{8})|\d{10}|(\[(((0{1,4}|1|ffff)*:*)){1,7}\]*)|(((127|[0-3])\.*){1,3}(127|[0-3])*)+(:(22|25|80|443|3128))*(\.|\@|\\|:|#|\?|%|\/)*))" "id:100007,phase:1,log,auditlog,deny,status:403,msg:'SSRF Localhost Bypass'"
SecRule REQUEST_URI "@rx (?i)(((localho)+st)+[^a-z])" "id:100008,phase:1,log,auditlog,deny,status:403,msg:'SSRF Localhost Bypass'"


##XSS Attempts ---------------------------------------------------------------------------------------------------------
# Block XSS attempts (e.g., <script>)
SecRule REQUEST_URI|ARGS|REQUEST_BODY "@rx (?i)((<|&lt|%3C)*script(>|&gt;|%3E)*)" "id:100001,phase:1,log,auditlog,deny,status:403,msg:'XSS'"